// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  image       String
  language    String
  genre       String
  director    String
  trailer     String
  description String
  duration    Int
  startDate   DateTime
  endDate     DateTime
  showtimes   Showtime[]
  reservations Reservation[]
}

model Theatre {
  id          Int       @id @default(autoincrement())
  name        String
  city        String
  ticketPrice Float
  seats       Int
  image       String
  showtimes   Showtime[]
  reservations Reservation[]
}

model Showtime {
  id          Int       @id @default(autoincrement())
  ticketPrice Float
  startDate   DateTime
  endDate     DateTime
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  theatre     Theatre   @relation(fields: [theatreId], references: [id])
  theatreId   Int
  reservations Reservation[]
}

model Reservation {
  id          Int       @id @default(autoincrement())
  date        DateTime
  startAt     DateTime
  seats       Int
  orderId     String
  ticketPrice Float
  total       Float
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  theatre     Theatre   @relation(fields: [theatreId], references: [id])
  theatreId   Int
  showtime    Showtime  @relation(fields: [showtimeId], references: [id])
  showtimeId  Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  phone       String
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  phone       String?
  orderId     String?
  reservations Reservation[]
  account Account[]
}

enum Role {
  ADMIN
  CUSTOMER
  SUPERADMIN
}

model Account{
   id          Int       @id @default(autoincrement())
   userId      Int
   type        String
   provider     String
   ProviderAccoountId  String
   refresh_token   String
   access_token   String
   expires_at    Int?
   token_type  String?
   scope    String?
   id_token  String?
   session_state   String?

   user User @relation(fields: [userId], references: [id], onDelete:Cascade)
 
 @@unique([provider,ProviderAccoountId])

}
