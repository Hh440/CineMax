// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Movie {
  id          String       @id @default(uuid())
  title       String
  image       String?
  language    String?
  genre       String?
  director    String?
  trailer     String?
  description String?
  duration    Int?
  startDate   DateTime?
  endDate     DateTime?
  showtimes   Showtime[]
  reservations Reservation[]
}

model Theatre {
  id          String      @id @default(uuid())
  name        String
  city        String?
  ticketPrice Float?
  seats       Int?
  image       String?
  Address     String?
  showtimes   Showtime[]
  reservations Reservation[]
}

model Showtime {
  id          String       @id @default(uuid())
  ticketPrice Float
  startDate   DateTime
  endDate     DateTime
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     String
  theatre     Theatre   @relation(fields: [theatreId], references: [id])
  theatreId   String
  reservations Reservation[]
}

model Reservation {
  id          String       @id @default(uuid())
  date        DateTime
  startAt     DateTime
  seats       Int
  orderId     String
  ticketPrice Float
  total       Float
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     String
  theatre     Theatre   @relation(fields: [theatreId], references: [id])
  theatreId   String
  showtime    Showtime  @relation(fields: [showtimeId], references: [id])
  showtimeId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  name        String
  phone       String
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  phone       String?
  orderId     String?
  reservations Reservation[]
  account Account[]
}

enum Role {
  ADMIN
  CUSTOMER
  SUPERADMIN
}

model Account{
   id          String      @id @default(uuid())
   userId      String
   type        String
   provider     String
   ProviderAccoountId  String
   refresh_token   String
   access_token   String
   expires_at    Int?
   token_type  String?
   scope    String?
   id_token  String?
   session_state   String?

   user User @relation(fields: [userId], references: [id], onDelete:Cascade)
 
 @@unique([provider,ProviderAccoountId])

}
